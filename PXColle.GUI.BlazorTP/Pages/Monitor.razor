@page "/monitor"
@using System.Collections.ObjectModel
@using PXColle.Action
@inject MasterHelper master

<h2>正在运行</h2>

@if (contextsRunning == null)
{
    <p>暂无</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>名称</td>
                <td>处理程序</td>
                <td>状态</td>
                <td>描述</td>
                <td>地址</td>
                <td>最后更新时间</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in contextsRunning)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Key</td>
                    <td>@item.Status</td>
                    <td>@item.StatusDesc</td>
                    <td>@item.Url</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>等待队列</h2>

@if (contextsPending == null)
{
    <p>暂无</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>名称</td>
                <td>处理程序</td>
                <td>状态</td>
                <td>描述</td>
                <td>地址</td>
                <td>最后更新时间</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in contextsPending)
            {
            <tr>
                <td>@item.Name</td>
                <td>@item.Key</td>
                <td>@item.Status</td>
                <td>@item.StatusDesc</td>
                <td>@item.Url</td>
                <td>@item.UpdatedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")</td>
            </tr>
            }
        </tbody>
    </table>
}

<h2>最近运行</h2>

@if (contextsOther == null)
{
    <p>暂无</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>名称</td>
                <td>处理程序</td>
                <td>状态</td>
                <td>描述</td>
                <td>地址</td>
                <td>最后更新时间</td>
                <td>操作</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in contextsOther)
            {
            <tr>
                <td>@item.Name</td>
                <td>@item.Key</td>
                <td>@item.Status</td>
                <td>@item.StatusDesc</td>
                <td>@item.Url</td>
                <td>@item.UpdatedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")</td>
                <td><button class="btn btn-outline-success" @onclick="(() => Retry(item.Id))">重试</button></td>
            </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<PXActionContext> contextsPending;
    private IEnumerable<PXActionContext> contextsRunning;
    private IEnumerable<PXActionContext> contextsOther;


    protected override async Task OnInitializedAsync()
    {
        UpdateContexts(master.Master.GetActions());
        master.Master.OnStatusChange += async (e, a) =>
        {
            UpdateContexts(master.Master.GetActions());
            await InvokeAsync(StateHasChanged);
        };
    }

    void UpdateContexts(IEnumerable<PXActionContext> contexts)
    {
        contextsPending = contexts.Where(x => x.Status == PXActionStatus.Pending);
        contextsRunning = contexts.Where(x => x.Status == PXActionStatus.Running).OrderByDescending(x => x.CreatedAt);
        contextsOther = contexts.Where(x => x.Status != PXActionStatus.Running && x.Status != PXActionStatus.Pending);
    }

    void Retry(string id)
    {
        master.Master.RetryAction(id);
    }
}